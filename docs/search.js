window.pdocSearch = (function(){
/** elasticlunr - http://weixsong.github.io * Copyright (C) 2017 Oliver Nightingale * Copyright (C) 2017 Wei Song * MIT Licensed */!function(){function e(e){if(null===e||"object"!=typeof e)return e;var t=e.constructor();for(var n in e)e.hasOwnProperty(n)&&(t[n]=e[n]);return t}var t=function(e){var n=new t.Index;return n.pipeline.add(t.trimmer,t.stopWordFilter,t.stemmer),e&&e.call(n,n),n};t.version="0.9.5",lunr=t,t.utils={},t.utils.warn=function(e){return function(t){e.console&&console.warn&&console.warn(t)}}(this),t.utils.toString=function(e){return void 0===e||null===e?"":e.toString()},t.EventEmitter=function(){this.events={}},t.EventEmitter.prototype.addListener=function(){var e=Array.prototype.slice.call(arguments),t=e.pop(),n=e;if("function"!=typeof t)throw new TypeError("last argument must be a function");n.forEach(function(e){this.hasHandler(e)||(this.events[e]=[]),this.events[e].push(t)},this)},t.EventEmitter.prototype.removeListener=function(e,t){if(this.hasHandler(e)){var n=this.events[e].indexOf(t);-1!==n&&(this.events[e].splice(n,1),0==this.events[e].length&&delete this.events[e])}},t.EventEmitter.prototype.emit=function(e){if(this.hasHandler(e)){var t=Array.prototype.slice.call(arguments,1);this.events[e].forEach(function(e){e.apply(void 0,t)},this)}},t.EventEmitter.prototype.hasHandler=function(e){return e in this.events},t.tokenizer=function(e){if(!arguments.length||null===e||void 0===e)return[];if(Array.isArray(e)){var n=e.filter(function(e){return null===e||void 0===e?!1:!0});n=n.map(function(e){return t.utils.toString(e).toLowerCase()});var i=[];return n.forEach(function(e){var n=e.split(t.tokenizer.seperator);i=i.concat(n)},this),i}return e.toString().trim().toLowerCase().split(t.tokenizer.seperator)},t.tokenizer.defaultSeperator=/[\s\-]+/,t.tokenizer.seperator=t.tokenizer.defaultSeperator,t.tokenizer.setSeperator=function(e){null!==e&&void 0!==e&&"object"==typeof e&&(t.tokenizer.seperator=e)},t.tokenizer.resetSeperator=function(){t.tokenizer.seperator=t.tokenizer.defaultSeperator},t.tokenizer.getSeperator=function(){return t.tokenizer.seperator},t.Pipeline=function(){this._queue=[]},t.Pipeline.registeredFunctions={},t.Pipeline.registerFunction=function(e,n){n in t.Pipeline.registeredFunctions&&t.utils.warn("Overwriting existing registered function: "+n),e.label=n,t.Pipeline.registeredFunctions[n]=e},t.Pipeline.getRegisteredFunction=function(e){return e in t.Pipeline.registeredFunctions!=!0?null:t.Pipeline.registeredFunctions[e]},t.Pipeline.warnIfFunctionNotRegistered=function(e){var n=e.label&&e.label in this.registeredFunctions;n||t.utils.warn("Function is not registered with pipeline. This may cause problems when serialising the index.\n",e)},t.Pipeline.load=function(e){var n=new t.Pipeline;return e.forEach(function(e){var i=t.Pipeline.getRegisteredFunction(e);if(!i)throw new Error("Cannot load un-registered function: "+e);n.add(i)}),n},t.Pipeline.prototype.add=function(){var e=Array.prototype.slice.call(arguments);e.forEach(function(e){t.Pipeline.warnIfFunctionNotRegistered(e),this._queue.push(e)},this)},t.Pipeline.prototype.after=function(e,n){t.Pipeline.warnIfFunctionNotRegistered(n);var i=this._queue.indexOf(e);if(-1===i)throw new Error("Cannot find existingFn");this._queue.splice(i+1,0,n)},t.Pipeline.prototype.before=function(e,n){t.Pipeline.warnIfFunctionNotRegistered(n);var i=this._queue.indexOf(e);if(-1===i)throw new Error("Cannot find existingFn");this._queue.splice(i,0,n)},t.Pipeline.prototype.remove=function(e){var t=this._queue.indexOf(e);-1!==t&&this._queue.splice(t,1)},t.Pipeline.prototype.run=function(e){for(var t=[],n=e.length,i=this._queue.length,o=0;n>o;o++){for(var r=e[o],s=0;i>s&&(r=this._queue[s](r,o,e),void 0!==r&&null!==r);s++);void 0!==r&&null!==r&&t.push(r)}return t},t.Pipeline.prototype.reset=function(){this._queue=[]},t.Pipeline.prototype.get=function(){return this._queue},t.Pipeline.prototype.toJSON=function(){return this._queue.map(function(e){return t.Pipeline.warnIfFunctionNotRegistered(e),e.label})},t.Index=function(){this._fields=[],this._ref="id",this.pipeline=new t.Pipeline,this.documentStore=new t.DocumentStore,this.index={},this.eventEmitter=new t.EventEmitter,this._idfCache={},this.on("add","remove","update",function(){this._idfCache={}}.bind(this))},t.Index.prototype.on=function(){var e=Array.prototype.slice.call(arguments);return this.eventEmitter.addListener.apply(this.eventEmitter,e)},t.Index.prototype.off=function(e,t){return this.eventEmitter.removeListener(e,t)},t.Index.load=function(e){e.version!==t.version&&t.utils.warn("version mismatch: current "+t.version+" importing "+e.version);var n=new this;n._fields=e.fields,n._ref=e.ref,n.documentStore=t.DocumentStore.load(e.documentStore),n.pipeline=t.Pipeline.load(e.pipeline),n.index={};for(var i in e.index)n.index[i]=t.InvertedIndex.load(e.index[i]);return n},t.Index.prototype.addField=function(e){return this._fields.push(e),this.index[e]=new t.InvertedIndex,this},t.Index.prototype.setRef=function(e){return this._ref=e,this},t.Index.prototype.saveDocument=function(e){return this.documentStore=new t.DocumentStore(e),this},t.Index.prototype.addDoc=function(e,n){if(e){var n=void 0===n?!0:n,i=e[this._ref];this.documentStore.addDoc(i,e),this._fields.forEach(function(n){var o=this.pipeline.run(t.tokenizer(e[n]));this.documentStore.addFieldLength(i,n,o.length);var r={};o.forEach(function(e){e in r?r[e]+=1:r[e]=1},this);for(var s in r){var u=r[s];u=Math.sqrt(u),this.index[n].addToken(s,{ref:i,tf:u})}},this),n&&this.eventEmitter.emit("add",e,this)}},t.Index.prototype.removeDocByRef=function(e){if(e&&this.documentStore.isDocStored()!==!1&&this.documentStore.hasDoc(e)){var t=this.documentStore.getDoc(e);this.removeDoc(t,!1)}},t.Index.prototype.removeDoc=function(e,n){if(e){var n=void 0===n?!0:n,i=e[this._ref];this.documentStore.hasDoc(i)&&(this.documentStore.removeDoc(i),this._fields.forEach(function(n){var o=this.pipeline.run(t.tokenizer(e[n]));o.forEach(function(e){this.index[n].removeToken(e,i)},this)},this),n&&this.eventEmitter.emit("remove",e,this))}},t.Index.prototype.updateDoc=function(e,t){var t=void 0===t?!0:t;this.removeDocByRef(e[this._ref],!1),this.addDoc(e,!1),t&&this.eventEmitter.emit("update",e,this)},t.Index.prototype.idf=function(e,t){var n="@"+t+"/"+e;if(Object.prototype.hasOwnProperty.call(this._idfCache,n))return this._idfCache[n];var i=this.index[t].getDocFreq(e),o=1+Math.log(this.documentStore.length/(i+1));return this._idfCache[n]=o,o},t.Index.prototype.getFields=function(){return this._fields.slice()},t.Index.prototype.search=function(e,n){if(!e)return[];e="string"==typeof e?{any:e}:JSON.parse(JSON.stringify(e));var i=null;null!=n&&(i=JSON.stringify(n));for(var o=new t.Configuration(i,this.getFields()).get(),r={},s=Object.keys(e),u=0;u<s.length;u++){var a=s[u];r[a]=this.pipeline.run(t.tokenizer(e[a]))}var l={};for(var c in o){var d=r[c]||r.any;if(d){var f=this.fieldSearch(d,c,o),h=o[c].boost;for(var p in f)f[p]=f[p]*h;for(var p in f)p in l?l[p]+=f[p]:l[p]=f[p]}}var v,g=[];for(var p in l)v={ref:p,score:l[p]},this.documentStore.hasDoc(p)&&(v.doc=this.documentStore.getDoc(p)),g.push(v);return g.sort(function(e,t){return t.score-e.score}),g},t.Index.prototype.fieldSearch=function(e,t,n){var i=n[t].bool,o=n[t].expand,r=n[t].boost,s=null,u={};return 0!==r?(e.forEach(function(e){var n=[e];1==o&&(n=this.index[t].expandToken(e));var r={};n.forEach(function(n){var o=this.index[t].getDocs(n),a=this.idf(n,t);if(s&&"AND"==i){var l={};for(var c in s)c in o&&(l[c]=o[c]);o=l}n==e&&this.fieldSearchStats(u,n,o);for(var c in o){var d=this.index[t].getTermFrequency(n,c),f=this.documentStore.getFieldLength(c,t),h=1;0!=f&&(h=1/Math.sqrt(f));var p=1;n!=e&&(p=.15*(1-(n.length-e.length)/n.length));var v=d*a*h*p;c in r?r[c]+=v:r[c]=v}},this),s=this.mergeScores(s,r,i)},this),s=this.coordNorm(s,u,e.length)):void 0},t.Index.prototype.mergeScores=function(e,t,n){if(!e)return t;if("AND"==n){var i={};for(var o in t)o in e&&(i[o]=e[o]+t[o]);return i}for(var o in t)o in e?e[o]+=t[o]:e[o]=t[o];return e},t.Index.prototype.fieldSearchStats=function(e,t,n){for(var i in n)i in e?e[i].push(t):e[i]=[t]},t.Index.prototype.coordNorm=function(e,t,n){for(var i in e)if(i in t){var o=t[i].length;e[i]=e[i]*o/n}return e},t.Index.prototype.toJSON=function(){var e={};return this._fields.forEach(function(t){e[t]=this.index[t].toJSON()},this),{version:t.version,fields:this._fields,ref:this._ref,documentStore:this.documentStore.toJSON(),index:e,pipeline:this.pipeline.toJSON()}},t.Index.prototype.use=function(e){var t=Array.prototype.slice.call(arguments,1);t.unshift(this),e.apply(this,t)},t.DocumentStore=function(e){this._save=null===e||void 0===e?!0:e,this.docs={},this.docInfo={},this.length=0},t.DocumentStore.load=function(e){var t=new this;return t.length=e.length,t.docs=e.docs,t.docInfo=e.docInfo,t._save=e.save,t},t.DocumentStore.prototype.isDocStored=function(){return this._save},t.DocumentStore.prototype.addDoc=function(t,n){this.hasDoc(t)||this.length++,this.docs[t]=this._save===!0?e(n):null},t.DocumentStore.prototype.getDoc=function(e){return this.hasDoc(e)===!1?null:this.docs[e]},t.DocumentStore.prototype.hasDoc=function(e){return e in this.docs},t.DocumentStore.prototype.removeDoc=function(e){this.hasDoc(e)&&(delete this.docs[e],delete this.docInfo[e],this.length--)},t.DocumentStore.prototype.addFieldLength=function(e,t,n){null!==e&&void 0!==e&&0!=this.hasDoc(e)&&(this.docInfo[e]||(this.docInfo[e]={}),this.docInfo[e][t]=n)},t.DocumentStore.prototype.updateFieldLength=function(e,t,n){null!==e&&void 0!==e&&0!=this.hasDoc(e)&&this.addFieldLength(e,t,n)},t.DocumentStore.prototype.getFieldLength=function(e,t){return null===e||void 0===e?0:e in this.docs&&t in this.docInfo[e]?this.docInfo[e][t]:0},t.DocumentStore.prototype.toJSON=function(){return{docs:this.docs,docInfo:this.docInfo,length:this.length,save:this._save}},t.stemmer=function(){var e={ational:"ate",tional:"tion",enci:"ence",anci:"ance",izer:"ize",bli:"ble",alli:"al",entli:"ent",eli:"e",ousli:"ous",ization:"ize",ation:"ate",ator:"ate",alism:"al",iveness:"ive",fulness:"ful",ousness:"ous",aliti:"al",iviti:"ive",biliti:"ble",logi:"log"},t={icate:"ic",ative:"",alize:"al",iciti:"ic",ical:"ic",ful:"",ness:""},n="[^aeiou]",i="[aeiouy]",o=n+"[^aeiouy]*",r=i+"[aeiou]*",s="^("+o+")?"+r+o,u="^("+o+")?"+r+o+"("+r+")?$",a="^("+o+")?"+r+o+r+o,l="^("+o+")?"+i,c=new RegExp(s),d=new RegExp(a),f=new RegExp(u),h=new RegExp(l),p=/^(.+?)(ss|i)es$/,v=/^(.+?)([^s])s$/,g=/^(.+?)eed$/,m=/^(.+?)(ed|ing)$/,y=/.$/,S=/(at|bl|iz)$/,x=new RegExp("([^aeiouylsz])\\1$"),w=new RegExp("^"+o+i+"[^aeiouwxy]$"),I=/^(.+?[^aeiou])y$/,b=/^(.+?)(ational|tional|enci|anci|izer|bli|alli|entli|eli|ousli|ization|ation|ator|alism|iveness|fulness|ousness|aliti|iviti|biliti|logi)$/,E=/^(.+?)(icate|ative|alize|iciti|ical|ful|ness)$/,D=/^(.+?)(al|ance|ence|er|ic|able|ible|ant|ement|ment|ent|ou|ism|ate|iti|ous|ive|ize)$/,F=/^(.+?)(s|t)(ion)$/,_=/^(.+?)e$/,P=/ll$/,k=new RegExp("^"+o+i+"[^aeiouwxy]$"),z=function(n){var i,o,r,s,u,a,l;if(n.length<3)return n;if(r=n.substr(0,1),"y"==r&&(n=r.toUpperCase()+n.substr(1)),s=p,u=v,s.test(n)?n=n.replace(s,"$1$2"):u.test(n)&&(n=n.replace(u,"$1$2")),s=g,u=m,s.test(n)){var z=s.exec(n);s=c,s.test(z[1])&&(s=y,n=n.replace(s,""))}else if(u.test(n)){var z=u.exec(n);i=z[1],u=h,u.test(i)&&(n=i,u=S,a=x,l=w,u.test(n)?n+="e":a.test(n)?(s=y,n=n.replace(s,"")):l.test(n)&&(n+="e"))}if(s=I,s.test(n)){var z=s.exec(n);i=z[1],n=i+"i"}if(s=b,s.test(n)){var z=s.exec(n);i=z[1],o=z[2],s=c,s.test(i)&&(n=i+e[o])}if(s=E,s.test(n)){var z=s.exec(n);i=z[1],o=z[2],s=c,s.test(i)&&(n=i+t[o])}if(s=D,u=F,s.test(n)){var z=s.exec(n);i=z[1],s=d,s.test(i)&&(n=i)}else if(u.test(n)){var z=u.exec(n);i=z[1]+z[2],u=d,u.test(i)&&(n=i)}if(s=_,s.test(n)){var z=s.exec(n);i=z[1],s=d,u=f,a=k,(s.test(i)||u.test(i)&&!a.test(i))&&(n=i)}return s=P,u=d,s.test(n)&&u.test(n)&&(s=y,n=n.replace(s,"")),"y"==r&&(n=r.toLowerCase()+n.substr(1)),n};return z}(),t.Pipeline.registerFunction(t.stemmer,"stemmer"),t.stopWordFilter=function(e){return e&&t.stopWordFilter.stopWords[e]!==!0?e:void 0},t.clearStopWords=function(){t.stopWordFilter.stopWords={}},t.addStopWords=function(e){null!=e&&Array.isArray(e)!==!1&&e.forEach(function(e){t.stopWordFilter.stopWords[e]=!0},this)},t.resetStopWords=function(){t.stopWordFilter.stopWords=t.defaultStopWords},t.defaultStopWords={"":!0,a:!0,able:!0,about:!0,across:!0,after:!0,all:!0,almost:!0,also:!0,am:!0,among:!0,an:!0,and:!0,any:!0,are:!0,as:!0,at:!0,be:!0,because:!0,been:!0,but:!0,by:!0,can:!0,cannot:!0,could:!0,dear:!0,did:!0,"do":!0,does:!0,either:!0,"else":!0,ever:!0,every:!0,"for":!0,from:!0,get:!0,got:!0,had:!0,has:!0,have:!0,he:!0,her:!0,hers:!0,him:!0,his:!0,how:!0,however:!0,i:!0,"if":!0,"in":!0,into:!0,is:!0,it:!0,its:!0,just:!0,least:!0,let:!0,like:!0,likely:!0,may:!0,me:!0,might:!0,most:!0,must:!0,my:!0,neither:!0,no:!0,nor:!0,not:!0,of:!0,off:!0,often:!0,on:!0,only:!0,or:!0,other:!0,our:!0,own:!0,rather:!0,said:!0,say:!0,says:!0,she:!0,should:!0,since:!0,so:!0,some:!0,than:!0,that:!0,the:!0,their:!0,them:!0,then:!0,there:!0,these:!0,they:!0,"this":!0,tis:!0,to:!0,too:!0,twas:!0,us:!0,wants:!0,was:!0,we:!0,were:!0,what:!0,when:!0,where:!0,which:!0,"while":!0,who:!0,whom:!0,why:!0,will:!0,"with":!0,would:!0,yet:!0,you:!0,your:!0},t.stopWordFilter.stopWords=t.defaultStopWords,t.Pipeline.registerFunction(t.stopWordFilter,"stopWordFilter"),t.trimmer=function(e){if(null===e||void 0===e)throw new Error("token should not be undefined");return e.replace(/^\W+/,"").replace(/\W+$/,"")},t.Pipeline.registerFunction(t.trimmer,"trimmer"),t.InvertedIndex=function(){this.root={docs:{},df:0}},t.InvertedIndex.load=function(e){var t=new this;return t.root=e.root,t},t.InvertedIndex.prototype.addToken=function(e,t,n){for(var n=n||this.root,i=0;i<=e.length-1;){var o=e[i];o in n||(n[o]={docs:{},df:0}),i+=1,n=n[o]}var r=t.ref;n.docs[r]?n.docs[r]={tf:t.tf}:(n.docs[r]={tf:t.tf},n.df+=1)},t.InvertedIndex.prototype.hasToken=function(e){if(!e)return!1;for(var t=this.root,n=0;n<e.length;n++){if(!t[e[n]])return!1;t=t[e[n]]}return!0},t.InvertedIndex.prototype.getNode=function(e){if(!e)return null;for(var t=this.root,n=0;n<e.length;n++){if(!t[e[n]])return null;t=t[e[n]]}return t},t.InvertedIndex.prototype.getDocs=function(e){var t=this.getNode(e);return null==t?{}:t.docs},t.InvertedIndex.prototype.getTermFrequency=function(e,t){var n=this.getNode(e);return null==n?0:t in n.docs?n.docs[t].tf:0},t.InvertedIndex.prototype.getDocFreq=function(e){var t=this.getNode(e);return null==t?0:t.df},t.InvertedIndex.prototype.removeToken=function(e,t){if(e){var n=this.getNode(e);null!=n&&t in n.docs&&(delete n.docs[t],n.df-=1)}},t.InvertedIndex.prototype.expandToken=function(e,t,n){if(null==e||""==e)return[];var t=t||[];if(void 0==n&&(n=this.getNode(e),null==n))return t;n.df>0&&t.push(e);for(var i in n)"docs"!==i&&"df"!==i&&this.expandToken(e+i,t,n[i]);return t},t.InvertedIndex.prototype.toJSON=function(){return{root:this.root}},t.Configuration=function(e,n){var e=e||"";if(void 0==n||null==n)throw new Error("fields should not be null");this.config={};var i;try{i=JSON.parse(e),this.buildUserConfig(i,n)}catch(o){t.utils.warn("user configuration parse failed, will use default configuration"),this.buildDefaultConfig(n)}},t.Configuration.prototype.buildDefaultConfig=function(e){this.reset(),e.forEach(function(e){this.config[e]={boost:1,bool:"OR",expand:!1}},this)},t.Configuration.prototype.buildUserConfig=function(e,n){var i="OR",o=!1;if(this.reset(),"bool"in e&&(i=e.bool||i),"expand"in e&&(o=e.expand||o),"fields"in e)for(var r in e.fields)if(n.indexOf(r)>-1){var s=e.fields[r],u=o;void 0!=s.expand&&(u=s.expand),this.config[r]={boost:s.boost||0===s.boost?s.boost:1,bool:s.bool||i,expand:u}}else t.utils.warn("field name in user configuration not found in index instance fields");else this.addAllFields2UserConfig(i,o,n)},t.Configuration.prototype.addAllFields2UserConfig=function(e,t,n){n.forEach(function(n){this.config[n]={boost:1,bool:e,expand:t}},this)},t.Configuration.prototype.get=function(){return this.config},t.Configuration.prototype.reset=function(){this.config={}},lunr.SortedSet=function(){this.length=0,this.elements=[]},lunr.SortedSet.load=function(e){var t=new this;return t.elements=e,t.length=e.length,t},lunr.SortedSet.prototype.add=function(){var e,t;for(e=0;e<arguments.length;e++)t=arguments[e],~this.indexOf(t)||this.elements.splice(this.locationFor(t),0,t);this.length=this.elements.length},lunr.SortedSet.prototype.toArray=function(){return this.elements.slice()},lunr.SortedSet.prototype.map=function(e,t){return this.elements.map(e,t)},lunr.SortedSet.prototype.forEach=function(e,t){return this.elements.forEach(e,t)},lunr.SortedSet.prototype.indexOf=function(e){for(var t=0,n=this.elements.length,i=n-t,o=t+Math.floor(i/2),r=this.elements[o];i>1;){if(r===e)return o;e>r&&(t=o),r>e&&(n=o),i=n-t,o=t+Math.floor(i/2),r=this.elements[o]}return r===e?o:-1},lunr.SortedSet.prototype.locationFor=function(e){for(var t=0,n=this.elements.length,i=n-t,o=t+Math.floor(i/2),r=this.elements[o];i>1;)e>r&&(t=o),r>e&&(n=o),i=n-t,o=t+Math.floor(i/2),r=this.elements[o];return r>e?o:e>r?o+1:void 0},lunr.SortedSet.prototype.intersect=function(e){for(var t=new lunr.SortedSet,n=0,i=0,o=this.length,r=e.length,s=this.elements,u=e.elements;;){if(n>o-1||i>r-1)break;s[n]!==u[i]?s[n]<u[i]?n++:s[n]>u[i]&&i++:(t.add(s[n]),n++,i++)}return t},lunr.SortedSet.prototype.clone=function(){var e=new lunr.SortedSet;return e.elements=this.toArray(),e.length=e.elements.length,e},lunr.SortedSet.prototype.union=function(e){var t,n,i;this.length>=e.length?(t=this,n=e):(t=e,n=this),i=t.clone();for(var o=0,r=n.toArray();o<r.length;o++)i.add(r[o]);return i},lunr.SortedSet.prototype.toJSON=function(){return this.toArray()},function(e,t){"function"==typeof define&&define.amd?define(t):"object"==typeof exports?module.exports=t():e.elasticlunr=t()}(this,function(){return t})}();
    /** pdoc search index */const docs = [{"fullname": "imptube", "modulename": "imptube", "kind": "module", "doc": "<p>This library provides an implementation of transfer function impedance tube measurements according to <a href=\"https://www.iso.org/standard/22851.html\">ISO 10534-2:1998</a>.</p>\n\n<p>It requires several Python packages to be installed:</p>\n\n<ul>\n<li>sounddevice</li>\n<li>soundfile</li>\n<li>scipy</li>\n<li>numpy</li>\n<li>pandas</li>\n</ul>\n\n<h2 id=\"installation\">Installation</h2>\n\n<p>It is currently not possible to install this library using <code>pip</code> or <code>conda</code>, please use the latest released package instead and install using <a href=\"https://packaging.python.org/en/latest/tutorials/installing-packages/\"><code>pip</code> locally</a>.</p>\n\n<h2 id=\"usage\">Usage</h2>\n\n<p>The library currently provides two ways to perform a measurement.</p>\n\n<h3 id=\"method-1-direct-measurement-without-saving-any-data\">Method 1: Direct measurement without saving any data</h3>\n\n<p>This method shows the inner logic of the whole measurement. In contrast to the second method, this method does not work with any folder/file structure.</p>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"kn\">import</span> <span class=\"nn\">imptube</span> <span class=\"k\">as</span> <span class=\"nn\">imp</span>\n\n<span class=\"n\">temp</span> <span class=\"o\">=</span> <span class=\"mi\">29</span>  <span class=\"c1\"># Temperature in degrees Celsius</span>\n<span class=\"n\">humidity</span> <span class=\"o\">=</span> <span class=\"mi\">30</span>  <span class=\"c1\"># Humidity level in percentage</span>\n<span class=\"n\">atm_pressure</span> <span class=\"o\">=</span> <span class=\"mi\">101300</span>  <span class=\"c1\"># Atmospheric pressure in Pascal</span>\n\n<span class=\"n\">tube</span> <span class=\"o\">=</span> <span class=\"n\">imp</span><span class=\"o\">.</span><span class=\"n\">Tube</span><span class=\"p\">(</span>\n    <span class=\"n\">further_mic_dist</span><span class=\"o\">=</span><span class=\"mf\">0.4</span><span class=\"p\">,</span>\n    <span class=\"n\">closer_mic_dist</span><span class=\"o\">=</span><span class=\"mf\">0.1</span><span class=\"p\">,</span>\n    <span class=\"n\">freq_limit</span><span class=\"o\">=</span><span class=\"mi\">1000</span>\n<span class=\"p\">)</span>\n\n<span class=\"n\">measurement</span> <span class=\"o\">=</span> <span class=\"n\">imp</span><span class=\"o\">.</span><span class=\"n\">Measurement</span><span class=\"p\">(</span><span class=\"n\">device</span><span class=\"o\">=</span><span class=\"mi\">15</span><span class=\"p\">)</span>  <span class=\"c1\"># Create an instance of the Measurement class</span>\n\n<span class=\"c1\"># Perform the configuration 1 measurement</span>\n<span class=\"n\">data</span><span class=\"p\">,</span> <span class=\"n\">fs</span> <span class=\"o\">=</span> <span class=\"n\">measurement</span><span class=\"o\">.</span><span class=\"n\">measure</span><span class=\"p\">(</span><span class=\"n\">export</span><span class=\"o\">=</span><span class=\"kc\">False</span><span class=\"p\">,</span> <span class=\"n\">thd_filter</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)</span>  \n<span class=\"n\">p11</span><span class=\"p\">,</span> <span class=\"n\">p12</span> <span class=\"o\">=</span> <span class=\"n\">imp</span><span class=\"o\">.</span><span class=\"n\">stereo_to_spectra</span><span class=\"p\">(</span><span class=\"n\">data</span><span class=\"o\">.</span><span class=\"n\">T</span><span class=\"p\">)</span>\n<span class=\"n\">freqs</span> <span class=\"o\">=</span> <span class=\"n\">imp</span><span class=\"o\">.</span><span class=\"n\">frequencies</span><span class=\"p\">(</span><span class=\"n\">p11</span><span class=\"p\">,</span> <span class=\"n\">fs</span><span class=\"p\">)</span>\n\n<span class=\"nb\">input</span><span class=\"p\">(</span><span class=\"s2\">&quot;Ready to measure in the second configuration?&quot;</span><span class=\"p\">)</span> \n\n<span class=\"c1\"># Perform the configuration 2 measurement</span>\n<span class=\"n\">data</span><span class=\"p\">,</span> <span class=\"n\">fs</span> <span class=\"o\">=</span> <span class=\"n\">measurement</span><span class=\"o\">.</span><span class=\"n\">measure</span><span class=\"p\">(</span><span class=\"n\">export</span><span class=\"o\">=</span><span class=\"kc\">False</span><span class=\"p\">,</span> <span class=\"n\">thd_filter</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)</span>\n<span class=\"n\">p21</span><span class=\"p\">,</span> <span class=\"n\">p22</span> <span class=\"o\">=</span> <span class=\"n\">imp</span><span class=\"o\">.</span><span class=\"n\">stereo_to_spectra</span><span class=\"p\">(</span><span class=\"n\">data</span><span class=\"o\">.</span><span class=\"n\">T</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># Calculate the calibration factor based on the spectra</span>\n<span class=\"n\">cf</span> <span class=\"o\">=</span> <span class=\"n\">imp</span><span class=\"o\">.</span><span class=\"n\">calibration_factor</span><span class=\"p\">(</span><span class=\"n\">p11</span><span class=\"p\">,</span> <span class=\"n\">p12</span><span class=\"p\">,</span> <span class=\"n\">p21</span><span class=\"p\">,</span> <span class=\"n\">p22</span><span class=\"p\">)</span>\n<span class=\"c1\"># Calculate the transfer function based on the spectra</span>\n<span class=\"c1\"># of the first configuration</span>\n<span class=\"n\">tf</span> <span class=\"o\">=</span> <span class=\"n\">imp</span><span class=\"o\">.</span><span class=\"n\">transfer_function</span><span class=\"p\">(</span><span class=\"n\">p11</span><span class=\"p\">,</span> <span class=\"n\">p12</span><span class=\"p\">)</span>  \n\n<span class=\"c1\"># Correct the transfer function using the calibration factor</span>\n<span class=\"n\">tf_corrected</span> <span class=\"o\">=</span> <span class=\"n\">tf</span> <span class=\"o\">/</span> <span class=\"n\">cf</span>  \n<span class=\"n\">tf_I</span><span class=\"p\">,</span> <span class=\"n\">tf_R</span> <span class=\"o\">=</span> <span class=\"n\">imp</span><span class=\"o\">.</span><span class=\"n\">tf_i_r</span><span class=\"p\">(</span><span class=\"n\">temp</span><span class=\"p\">,</span> <span class=\"n\">freqs</span><span class=\"p\">,</span> <span class=\"n\">tube</span><span class=\"o\">.</span><span class=\"n\">mic_spacing</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># Calculate the reflection factor, absorption coefficient and </span>\n<span class=\"c1\"># surface impedance based on the transfer function and other parameters</span>\n<span class=\"n\">refl_factor</span> <span class=\"o\">=</span> <span class=\"n\">imp</span><span class=\"o\">.</span><span class=\"n\">reflection_factor</span><span class=\"p\">(</span><span class=\"n\">tf_I</span><span class=\"p\">,</span> <span class=\"n\">tf_R</span><span class=\"p\">,</span> <span class=\"n\">tf_corrected</span><span class=\"p\">,</span> <span class=\"n\">temp</span><span class=\"p\">,</span> <span class=\"n\">freqs</span><span class=\"p\">,</span> <span class=\"n\">tube</span><span class=\"o\">.</span><span class=\"n\">closer_mic_dist</span><span class=\"p\">)</span>  \n\n<span class=\"n\">absorption_coeff</span> <span class=\"o\">=</span> <span class=\"n\">imp</span><span class=\"o\">.</span><span class=\"n\">absorption_coefficient</span><span class=\"p\">(</span><span class=\"n\">refl_factor</span><span class=\"p\">)</span>\n\n<span class=\"n\">surf_impedance</span> <span class=\"o\">=</span> <span class=\"n\">imp</span><span class=\"o\">.</span><span class=\"n\">surface_impedance</span><span class=\"p\">(</span><span class=\"n\">refl_factor</span><span class=\"p\">,</span> <span class=\"n\">temp</span><span class=\"p\">,</span> <span class=\"n\">atm_pressure</span><span class=\"p\">)</span>\n</code></pre>\n</div>\n\n<h3 id=\"method-2-using-the-sample-class-and-autosaving-the-captured-and-processed-data-to-a-specific-folder-structure\">Method 2: Using the <code>Sample</code> class and autosaving the captured and processed data to a specific folder structure</h3>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"kn\">import</span> <span class=\"nn\">imptube</span> <span class=\"k\">as</span> <span class=\"nn\">imp</span>\n\n<span class=\"n\">tube</span> <span class=\"o\">=</span> <span class=\"n\">imp</span><span class=\"o\">.</span><span class=\"n\">Tube</span><span class=\"p\">(</span>\n    <span class=\"n\">further_mic_dist</span><span class=\"o\">=</span><span class=\"mf\">0.3</span><span class=\"p\">,</span>\n    <span class=\"n\">closer_mic_dist</span><span class=\"o\">=</span><span class=\"mf\">0.1</span><span class=\"p\">,</span>\n    <span class=\"n\">freq_limit</span><span class=\"o\">=</span><span class=\"mi\">1000</span><span class=\"p\">)</span>\n\n<span class=\"n\">measurement</span> <span class=\"o\">=</span> <span class=\"n\">imp</span><span class=\"o\">.</span><span class=\"n\">Measurement</span><span class=\"p\">(</span><span class=\"n\">device</span><span class=\"o\">=</span><span class=\"mi\">15</span><span class=\"p\">)</span>\n\n<span class=\"n\">sample</span> <span class=\"o\">=</span> <span class=\"n\">imp</span><span class=\"o\">.</span><span class=\"n\">Sample</span><span class=\"p\">(</span><span class=\"s2\">&quot;test1&quot;</span><span class=\"p\">,</span>\n    <span class=\"n\">temperature</span><span class=\"o\">=</span><span class=\"mi\">29</span><span class=\"p\">,</span>\n    <span class=\"n\">rel_humidity</span><span class=\"o\">=</span><span class=\"mi\">30</span><span class=\"p\">,</span>\n    <span class=\"n\">tube</span><span class=\"o\">=</span><span class=\"n\">tube</span><span class=\"p\">)</span>\n\n<span class=\"n\">imp</span><span class=\"o\">.</span><span class=\"n\">calibration</span><span class=\"p\">(</span>\n    <span class=\"n\">sample</span><span class=\"o\">=</span><span class=\"n\">sample</span><span class=\"p\">,</span>\n    <span class=\"n\">measurement</span><span class=\"o\">=</span><span class=\"n\">measurement</span>\n<span class=\"p\">)</span>\n\n<span class=\"n\">imp</span><span class=\"o\">.</span><span class=\"n\">single_measurement</span><span class=\"p\">(</span>\n    <span class=\"n\">sample</span><span class=\"o\">=</span><span class=\"n\">sample</span><span class=\"p\">,</span>\n    <span class=\"n\">measurement</span><span class=\"o\">=</span><span class=\"n\">measurement</span><span class=\"p\">,</span>\n    <span class=\"n\">depth</span><span class=\"o\">=</span><span class=\"mi\">160</span>\n<span class=\"p\">)</span>\n</code></pre>\n</div>\n\n<h2 id=\"contributing\">Contributing</h2>\n\n<p>Pull requests are welcome. For any changes, please open an issue first\nto discuss what you would like to change.</p>\n\n<p>Please make sure to update tests as appropriate.</p>\n\n<h2 id=\"license\">License</h2>\n\n<p><a href=\"https://choosealicense.com/licenses/mit/\">MIT</a></p>\n"}, {"fullname": "imptube.movable_termination", "modulename": "imptube.movable_termination", "kind": "module", "doc": "<p>A module containing the class representing the movable termination wall\noperated by a stepper motor.</p>\n"}, {"fullname": "imptube.movable_termination.Stepper", "modulename": "imptube.movable_termination", "qualname": "Stepper", "kind": "class", "doc": "<p>A protocol representing a stepper motor.</p>\n\n<p>This protocol defines the methods required to control a stepper motor.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>Protocol</strong> (type):\nThe base protocol type.</li>\n</ul>\n\n<h6 id=\"methods\">Methods</h6>\n\n<p>on()\n    Turns on the stepper motor.\nenable()\n    Enables the stepper motor.\ndisable()\n    Disables the stepper motor.\nturn(revolutions: float, clockwise: bool) -> None\n    Turns the stepper motor by the specified number of revolutions in the specified direction.</p>\n", "bases": "typing.Protocol"}, {"fullname": "imptube.movable_termination.TerminationWall", "modulename": "imptube.movable_termination", "qualname": "TerminationWall", "kind": "class", "doc": "<p>A class representing the movable termination wall\noperated by a stepper motor.</p>\n\n<h6 id=\"attributes\">Attributes</h6>\n\n<ul>\n<li><strong>position</strong> (float):\nThe current position of the wall.</li>\n<li><strong>stepper</strong> (Stepper):\nThe stepper object enabling wall movements.</li>\n<li><strong>mm_per_cycle</strong> (float, optional):\nThe rotation to translation ratio. Default is 0.7832.</li>\n</ul>\n"}, {"fullname": "imptube.movable_termination.TerminationWall.adjust_wall", "modulename": "imptube.movable_termination", "qualname": "TerminationWall.adjust_wall", "kind": "function", "doc": "<p>Adjusts the wall position to the specified final position.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>position_final</strong> (float):\nThe desired final position of the wall.</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>None</strong></li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">position_final</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "imptube.pistepper", "modulename": "imptube.pistepper", "kind": "module", "doc": "<p>An example implementation of the Stepper class for movable termination.\nIn this case, implemented for the original impedance tube operated solely\nby Raspberry Pi 4 Model B. Because of some sound stability issues,\nnewer implementation relies on FT232H breakout board from Adafruit.</p>\n\n<p>This module provides a PiStepper class that contains methods for controlling\na stepper motor using a Raspberry Pi and a DRV8825 driver. The class allows\nfor setting the microstepping resolution, defining the ramping of the motor\nspeed, initiating GPIO settings, enabling/disabling the motor, and performing\nthe actual spinning of the motor.</p>\n\n<p>Constants:</p>\n\n<ul>\n<li>DIR: Direction GPIO Pin</li>\n<li>STEP: Step GPIO Pin</li>\n<li>MODE: Microstep Resolution GPIO Pins</li>\n<li>ENABLE: Enable GPIO Pin</li>\n<li>CW: Clockwise Rotation</li>\n<li>CCW: Counterclockwise Rotation</li>\n<li>SPR: Steps per Revolution</li>\n<li>FREQ: Frequency</li>\n<li>RESOLUTION: Dictionary mapping microstepping resolution names to GPIO pin values</li>\n<li>RESOLUTION_M: Dictionary mapping microstepping resolution names to step multipliers</li>\n</ul>\n"}, {"fullname": "imptube.pistepper.PiStepper", "modulename": "imptube.pistepper", "qualname": "PiStepper", "kind": "class", "doc": "<p>Contains methods for stepper motor operation using Pi and DRV8825 driver</p>\n\n<h2 id=\"attributes\">Attributes:</h2>\n\n<p>res : str\n    The microstepping resolution of the stepper motor.\ndelay : numpy.ndarray\n    The delay values for each step in the stepper motor movement.</p>\n\n<h2 id=\"methods\">Methods:</h2>\n\n<p>__init__(res=\"Half\"):\n    Initializes a PiStepper object with the specified microstepping resolution.</p>\n\n<pre><code>Parameters:\n----------\nres : str, optional\n    The microstepping resolution of the stepper motor. Default is \"Half\".\n</code></pre>\n\n<p>set_delay(step_count, fade=1, sin_begin=4):\n    Sets the delay values for each step in the stepper motor movement.</p>\n\n<pre><code>Parameters:\n----------\nstep_count : int\n    The total number of steps in the stepper motor movement.\nfade : float, optional\n    The duration of the ramping effect at the beginning and end of the movement. Default is 1.\nsin_begin : int, optional\n    The number of steps over which the ramping effect is applied. Default is 4.\n</code></pre>\n\n<p>on():\n    Initializes the GPIO settings for the stepper motor operation.</p>\n\n<p>off():\n    Cleans up the GPIO settings after the stepper motor operation.</p>\n\n<p>enable():\n    Enables the stepper motor by operating the ENABLE pin on the driver.</p>\n\n<p>disable():\n    Disables the stepper motor by operating the ENABLE pin on the driver.</p>\n\n<p>turn(revolutions=1, clockwise=True):\n    Performs the actual spinning of the stepper motor.</p>\n\n<pre><code>Parameters:\n----------\nrevolutions : float, optional\n    The number of full revolutions to be performed by the stepper motor. Default is 1.\nclockwise : bool, optional\n    Specifies the direction of rotation. True for clockwise, False for counterclockwise. Default is True.\n</code></pre>\n"}, {"fullname": "imptube.pistepper.PiStepper.__init__", "modulename": "imptube.pistepper", "qualname": "PiStepper.__init__", "kind": "function", "doc": "<p>Initializes a PiStepper object with the specified microstepping resolution.</p>\n\n<h2 id=\"parameters\">Parameters:</h2>\n\n<p>res : str, optional\n    The microstepping resolution of the stepper motor. Default is \"Half\".</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">res</span><span class=\"o\">=</span><span class=\"s1\">&#39;Half&#39;</span></span>)</span>"}, {"fullname": "imptube.pistepper.PiStepper.set_delay", "modulename": "imptube.pistepper", "qualname": "PiStepper.set_delay", "kind": "function", "doc": "<p>Sets the delay values for each step in the stepper motor movement.</p>\n\n<h2 id=\"parameters\">Parameters:</h2>\n\n<p>step_count : int\n    The total number of steps in the stepper motor movement.\nfade : float, optional\n    The duration of the ramping effect at the beginning and end of the movement. Default is 1.\nsin_begin : int, optional\n    The number of steps over which the ramping effect is applied. Default is 4.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">step_count</span>, </span><span class=\"param\"><span class=\"n\">fade</span><span class=\"o\">=</span><span class=\"mi\">1</span>, </span><span class=\"param\"><span class=\"n\">sin_begin</span><span class=\"o\">=</span><span class=\"mi\">4</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "imptube.pistepper.PiStepper.on", "modulename": "imptube.pistepper", "qualname": "PiStepper.on", "kind": "function", "doc": "<p>Initializes the GPIO settings for the stepper motor operation.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "imptube.pistepper.PiStepper.off", "modulename": "imptube.pistepper", "qualname": "PiStepper.off", "kind": "function", "doc": "<p>Cleans up the GPIO settings after the stepper motor operation.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "imptube.pistepper.PiStepper.enable", "modulename": "imptube.pistepper", "qualname": "PiStepper.enable", "kind": "function", "doc": "<p>Enables the stepper motor by operating the ENABLE pin on the driver.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "imptube.pistepper.PiStepper.disable", "modulename": "imptube.pistepper", "qualname": "PiStepper.disable", "kind": "function", "doc": "<p>Disables the stepper motor by operating the ENABLE pin on the driver.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "imptube.pistepper.PiStepper.turn", "modulename": "imptube.pistepper", "qualname": "PiStepper.turn", "kind": "function", "doc": "<p>Performs the actual spinning of the stepper motor.</p>\n\n<h2 id=\"parameters\">Parameters:</h2>\n\n<p>revolutions : float, optional\n    The number of full revolutions to be performed by the stepper motor. Default is 1.\nclockwise : bool, optional\n    Specifies the direction of rotation. True for clockwise, False for counterclockwise. Default is True.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">revolutions</span><span class=\"o\">=</span><span class=\"mi\">1</span>, </span><span class=\"param\"><span class=\"n\">clockwise</span><span class=\"o\">=</span><span class=\"kc\">True</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "imptube.processing", "modulename": "imptube.processing", "kind": "module", "doc": "<p>This module provides all the functions for processing the data from the\nimpedance tube measurements. The functions are divided into following submodules:</p>\n\n<ul>\n<li>files</li>\n<li>filters</li>\n<li>signal_proc</li>\n</ul>\n"}, {"fullname": "imptube.processing.files", "modulename": "imptube.processing.files", "kind": "module", "doc": "<p>This module contains functions for reading and processing audio files.</p>\n"}, {"fullname": "imptube.processing.files.read_file", "modulename": "imptube.processing.files", "qualname": "read_file", "kind": "function", "doc": "<p>Read a WAV file from the given path.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>path</strong> (str):\nThe path to the WAV file.</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>tuple</strong>: A tuple containing two elements:\n<ul>\n<li>The audio data as a 1-D numpy array.</li>\n<li>The sample rate of the audio.</li>\n</ul></li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">path</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">tuple</span><span class=\"p\">[</span><span class=\"nb\">int</span><span class=\"p\">,</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, {"fullname": "imptube.processing.files.load_bc", "modulename": "imptube.processing.files", "qualname": "load_bc", "kind": "function", "doc": "<p>Load the bound condition data from a given parent folder.</p>\n\n<h2 id=\"parameters\">Parameters:</h2>\n\n<p>parent_folder : str\n    The path to the parent folder containing the bound condition file.</p>\n\n<h2 id=\"returns\">Returns:</h2>\n\n<p>pd.DataFrame\n    The loaded bound condition data as a pandas DataFrame.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">parent_folder</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span><span class=\"return-annotation\">) -> <span class=\"n\">pandas</span><span class=\"o\">.</span><span class=\"n\">core</span><span class=\"o\">.</span><span class=\"n\">frame</span><span class=\"o\">.</span><span class=\"n\">DataFrame</span>:</span></span>", "funcdef": "def"}, {"fullname": "imptube.processing.files.load_freqs", "modulename": "imptube.processing.files", "qualname": "load_freqs", "kind": "function", "doc": "<p>Load frequency data from the specified parent folder.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>parent_folder</strong> (str):\nThe path to the parent folder containing the frequency data.</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>numpy.ndarray</strong>: The loaded frequency data as a NumPy array.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">parent_folder</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span><span class=\"return-annotation\">) -> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span>:</span></span>", "funcdef": "def"}, {"fullname": "imptube.processing.files.load_alpha", "modulename": "imptube.processing.files", "qualname": "load_alpha", "kind": "function", "doc": "<p>Load sound absorption coefficient data from the specified parent folder.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>parent_folder</strong> (str):\nThe path to the parent folder containing the sound absorption coefficient data files.</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>tuple</strong>: A tuple containing two lists:\n<ul>\n<li>alpha: A list of numpy arrays, each representing an sound absorption coefficient data file.</li>\n<li>unique_d: A list of unique 'd' values extracted from the file paths.</li>\n</ul></li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">parent_folder</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">tuple</span><span class=\"p\">[</span><span class=\"nb\">list</span><span class=\"p\">[</span><span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span><span class=\"p\">],</span> <span class=\"nb\">list</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]]</span>:</span></span>", "funcdef": "def"}, {"fullname": "imptube.processing.files.transfer_function_from_file", "modulename": "imptube.processing.files", "qualname": "transfer_function_from_file", "kind": "function", "doc": "<p>Calculate the transfer function from a file or a folder of files.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>path</strong> (str, optional):\nPath to the file, by default None.</li>\n<li><strong>folder</strong> (str, optional):\nPath to the folder containing files, by default None.</li>\n<li><strong>filter_str</strong> (str, optional):\nFilter string to select specific files in the folder, by default \"_\".</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>ndarray</strong>: The transfer function calculated from the input file(s).</li>\n</ul>\n\n<h6 id=\"raises\">Raises</h6>\n\n<ul>\n<li><strong>ValueError</strong>: If both <code>path</code> and <code>folder</code> are None.</li>\n</ul>\n\n<h6 id=\"notes\">Notes</h6>\n\n<ul>\n<li>If <code>folder</code> is None, the function will calculate the transfer function from a single file specified by <code>path</code>.</li>\n<li>If <code>folder</code> is provided, the function will calculate the average transfer function from all files in the folder that match the <code>filter_str</code>.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">path</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">folder</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">filter_str</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;_&#39;</span></span><span class=\"return-annotation\">) -> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span>:</span></span>", "funcdef": "def"}, {"fullname": "imptube.processing.files.calibration_from_files", "modulename": "imptube.processing.files", "qualname": "calibration_from_files", "kind": "function", "doc": "<p>Perform calibration from audio files.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>path1</strong> (str, optional):\nPath to the first audio file, by default None.</li>\n<li><strong>path2</strong> (str, optional):\nPath to the second audio file, by default None.</li>\n<li><strong>parent_folder</strong> (str, optional):\nPath to the parent folder containing calibration and audio folders, by default None.</li>\n<li><strong>export</strong> (bool, optional):\nWhether to export calibration data, by default True.</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>tuple[np.ndarray, np.ndarray]</strong>: Tuple containing the calibration factor and frequency data.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">path1</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">path2</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">parent_folder</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">export</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">True</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">tuple</span><span class=\"p\">[</span><span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span><span class=\"p\">,</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, {"fullname": "imptube.processing.files.transfer_function_from_path", "modulename": "imptube.processing.files", "qualname": "transfer_function_from_path", "kind": "function", "doc": "<p>Calculate transfer functions from audio files in the given parent folder.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>parent_folder</strong> (str):\nThe path to the parent folder containing the audio files.</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>tuple</strong>: A tuple containing the unique values of 'd' extracted from the audio file names,\nand a list of transfer functions corresponding to each unique 'd' value.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">parent_folder</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">tuple</span><span class=\"p\">[</span><span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span><span class=\"p\">,</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, {"fullname": "imptube.processing.files.alpha_from_path", "modulename": "imptube.processing.files", "qualname": "alpha_from_path", "kind": "function", "doc": "<p>Calculate the absorption coefficient from the given parent folder path.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>parent_folder</strong> (str):\nThe path of the parent folder.</li>\n<li><strong>fs</strong> (int, optional):\nThe sampling frequency, by default 48000.</li>\n<li><strong>cal</strong> (np.ndarray, optional):\nThe calibration transfer function, by default None.</li>\n<li><strong>tfs</strong> (np.ndarray, optional):\nThe transfer functions, by default None.</li>\n<li><strong>bc</strong> (pd.DataFrame, optional):\nThe boundary conditions, by default None.</li>\n<li><strong>return_f</strong> (bool, optional):\nWhether to return the absorption coefficient and frequencies, by default False.</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>tuple[np.ndarray, np.ndarray] or np.ndarray</strong>: If return_f is True, returns a tuple containing the absorption coefficient and frequencies.\nOtherwise, returns only the absorption coefficient.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">parent_folder</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">fs</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">=</span> <span class=\"mi\">48000</span>,</span><span class=\"param\">\t<span class=\"n\">cal</span><span class=\"p\">:</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">tfs</span><span class=\"p\">:</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">bc</span><span class=\"p\">:</span> <span class=\"n\">pandas</span><span class=\"o\">.</span><span class=\"n\">core</span><span class=\"o\">.</span><span class=\"n\">frame</span><span class=\"o\">.</span><span class=\"n\">DataFrame</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">return_f</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">False</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">tuple</span><span class=\"p\">[</span><span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span><span class=\"p\">,</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, {"fullname": "imptube.processing.filters", "modulename": "imptube.processing.filters", "kind": "module", "doc": "<p>This module contains functions for filtering signals obtained from the impedance tube measurements.</p>\n"}, {"fullname": "imptube.processing.filters.spectral_filtering", "modulename": "imptube.processing.filters", "qualname": "spectral_filtering", "kind": "function", "doc": "<p>Apply spectral filtering to an array.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>arr</strong> (np.ndarray):\nThe input array.</li>\n<li><strong>low_pass</strong> (int):\nThe cutoff frequency for the low-pass filter.</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>np.ndarray</strong>: The filtered array.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">arr</span><span class=\"p\">:</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span>, </span><span class=\"param\"><span class=\"n\">low_pass</span><span class=\"p\">:</span> <span class=\"nb\">int</span></span><span class=\"return-annotation\">) -> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span>:</span></span>", "funcdef": "def"}, {"fullname": "imptube.processing.filters.extend_with_zeros", "modulename": "imptube.processing.filters", "qualname": "extend_with_zeros", "kind": "function", "doc": "<p>Extend the input array with zeros.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>p_time</strong> (np.ndarray):\nThe input array.</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>np.ndarray</strong>: The extended array with zeros.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">p_time</span><span class=\"p\">:</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span></span><span class=\"return-annotation\">) -> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span>:</span></span>", "funcdef": "def"}, {"fullname": "imptube.processing.filters.tf_filtering", "modulename": "imptube.processing.filters", "qualname": "tf_filtering", "kind": "function", "doc": "<p>Window a transfer function to a limited bandwidth.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>tf</strong> (np.ndarray):\nThe transfer function to be filtered.</li>\n<li><strong>lowcut</strong> (int, optional):\nThe lower cutoff frequency in Hz. Default is 10.</li>\n<li><strong>highcut</strong> (int, optional):\nThe upper cutoff frequency in Hz. Default is 1000.</li>\n<li><strong>fs</strong> (int, optional):\nThe sampling frequency in Hz. Default is 48000.</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>Tuple[np.ndarray, np.ndarray]</strong>: A tuple containing the filtered transfer function and the filter window.</li>\n</ul>\n\n<h6 id=\"notes\">Notes</h6>\n\n<p>For some reason, when used for calibration TF filtering, \nlowcut should be put high enough to prevent problems with low S/N ratio.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">tf</span><span class=\"p\">:</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span>,</span><span class=\"param\">\t<span class=\"n\">lowcut</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">=</span> <span class=\"mi\">10</span>,</span><span class=\"param\">\t<span class=\"n\">highcut</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">=</span> <span class=\"mi\">1000</span>,</span><span class=\"param\">\t<span class=\"n\">fs</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">=</span> <span class=\"mi\">48000</span></span><span class=\"return-annotation\">) -> <span class=\"n\">Tuple</span><span class=\"p\">[</span><span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span><span class=\"p\">,</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, {"fullname": "imptube.processing.filters.ir_filtering", "modulename": "imptube.processing.filters", "qualname": "ir_filtering", "kind": "function", "doc": "<p>This function cuts out the second half of the impulse response, which contains harmonic distortion products.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>impulse_response</strong> (np.ndarray):\nThe input impulse response array.</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>np.ndarray</strong>: The filtered impulse response array.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">impulse_response</span><span class=\"p\">:</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span></span><span class=\"return-annotation\">) -> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span>:</span></span>", "funcdef": "def"}, {"fullname": "imptube.processing.filters.count_octaves", "modulename": "imptube.processing.filters", "qualname": "count_octaves", "kind": "function", "doc": "<p>This function counts octaves between two provided frequencies.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>f0</strong> (float):\nThe lower frequency.</li>\n<li><strong>f1</strong> (float):\nThe higher frequency.</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>float</strong>: The number of octaves between f0 and f1.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">f0</span><span class=\"p\">:</span> <span class=\"nb\">float</span>, </span><span class=\"param\"><span class=\"n\">f1</span><span class=\"p\">:</span> <span class=\"nb\">float</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">float</span>:</span></span>", "funcdef": "def"}, {"fullname": "imptube.processing.filters.harmonic_distortion_filter", "modulename": "imptube.processing.filters", "qualname": "harmonic_distortion_filter", "kind": "function", "doc": "<p>Combination of IR and TF filtering for removing harmonic distortion from measured signal.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>p_time</strong> (np.ndarray):\nTime domain recording.</li>\n<li><strong>p_ref</strong> (np.ndarray):\nReference (source time sequence).</li>\n<li><strong>f_low</strong> (float):\nLower frequency limit of the reference (used for TF filtering and rolling).\nFor some reason, to filter calibration audio, this should be higher than the original frequency limit of the sweep.</li>\n<li><strong>f_high</strong> (float):\nHigher frequency limit of the reference.</li>\n<li><strong>fs</strong> (int):\nSampling frequency.</li>\n<li><strong>roll_fwd</strong> (bool):\nSets the direction for reference signal rolling. This is done to keep the end of the measured sweep.</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>np.ndarray</strong>: Array containing the filtered time domain signals for both channels.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">p_time</span><span class=\"p\">:</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span>,</span><span class=\"param\">\t<span class=\"n\">p_ref</span><span class=\"p\">:</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span>,</span><span class=\"param\">\t<span class=\"n\">f_low</span><span class=\"p\">:</span> <span class=\"nb\">float</span> <span class=\"o\">=</span> <span class=\"mi\">10</span>,</span><span class=\"param\">\t<span class=\"n\">f_high</span><span class=\"p\">:</span> <span class=\"nb\">float</span> <span class=\"o\">=</span> <span class=\"mi\">1000</span>,</span><span class=\"param\">\t<span class=\"n\">fs</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">=</span> <span class=\"mi\">48000</span>,</span><span class=\"param\">\t<span class=\"n\">roll_fwd</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">True</span></span><span class=\"return-annotation\">) -> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span>:</span></span>", "funcdef": "def"}, {"fullname": "imptube.processing.signal_proc", "modulename": "imptube.processing.signal_proc", "kind": "module", "doc": "<p>This module contains functions for processing audio signals from the impedance tube measurements.</p>\n"}, {"fullname": "imptube.processing.signal_proc.read_audio", "modulename": "imptube.processing.signal_proc", "qualname": "read_audio", "kind": "function", "doc": "<p>Read audio from a file.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>file</strong> (tuple[np.ndarray, int]):\nA tuple containing the audio data as a numpy array and the sample rate.</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>np.ndarray</strong>: The audio data as a numpy array.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">file</span><span class=\"p\">:</span> <span class=\"nb\">tuple</span><span class=\"p\">[</span><span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span><span class=\"p\">,</span> <span class=\"nb\">int</span><span class=\"p\">]</span></span><span class=\"return-annotation\">) -> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span>:</span></span>", "funcdef": "def"}, {"fullname": "imptube.processing.signal_proc.separate_mono", "modulename": "imptube.processing.signal_proc", "qualname": "separate_mono", "kind": "function", "doc": "<p>Separates the stereo audio data into two mono channels.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>stereo_data</strong> (np.ndarray):\nThe stereo audio data to be separated.</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>tuple[np.ndarray, np.ndarray]</strong>: A tuple containing two mono channels, where the first element is the\naudio data for the first channel and the second element is the audio\ndata for the second channel.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">stereo_data</span><span class=\"p\">:</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">tuple</span><span class=\"p\">[</span><span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span><span class=\"p\">,</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, {"fullname": "imptube.processing.signal_proc.time_to_freq", "modulename": "imptube.processing.signal_proc", "qualname": "time_to_freq", "kind": "function", "doc": "<p>Convert time domain signal to frequency domain using Fast Fourier Transform (FFT).</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>p_time</strong> (np.ndarray):\nThe time domain signal to be converted.</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>np.ndarray</strong>: The frequency domain representation of the input signal.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">p_time</span><span class=\"p\">:</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span></span><span class=\"return-annotation\">) -> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span>:</span></span>", "funcdef": "def"}, {"fullname": "imptube.processing.signal_proc.frequencies", "modulename": "imptube.processing.signal_proc", "qualname": "frequencies", "kind": "function", "doc": "<p>Calculate the frequencies of a signal.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>p</strong> (np.ndarray):\nThe signal data.</li>\n<li><strong>fs</strong> (int):\nThe sampling frequency.</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>np.ndarray</strong>: An array of frequencies corresponding to the signal.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">p</span><span class=\"p\">:</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span>, </span><span class=\"param\"><span class=\"n\">fs</span><span class=\"p\">:</span> <span class=\"nb\">int</span></span><span class=\"return-annotation\">) -> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span>:</span></span>", "funcdef": "def"}, {"fullname": "imptube.processing.signal_proc.stereo_to_spectra", "modulename": "imptube.processing.signal_proc", "qualname": "stereo_to_spectra", "kind": "function", "doc": "<p>Convert stereo audio data to spectra.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>stereo_data</strong> (np.ndarray):\nStereo audio data.</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>tuple[np.ndarray, np.ndarray]</strong>: Tuple containing the spectra of the first and second channels.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">stereo_data</span><span class=\"p\">:</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">tuple</span><span class=\"p\">[</span><span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span><span class=\"p\">,</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, {"fullname": "imptube.processing.signal_proc.auto_spectrum", "modulename": "imptube.processing.signal_proc", "qualname": "auto_spectrum", "kind": "function", "doc": "<p>Calculate the auto spectrum of a signal.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>p1</strong> (np.ndarray):\nThe input signal.</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>np.ndarray</strong>: The auto spectrum of the input signal.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">p1</span><span class=\"p\">:</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span></span><span class=\"return-annotation\">) -> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span>:</span></span>", "funcdef": "def"}, {"fullname": "imptube.processing.signal_proc.cross_spectrum", "modulename": "imptube.processing.signal_proc", "qualname": "cross_spectrum", "kind": "function", "doc": "<p>Calculate the cross spectrum between two signals.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>p1</strong> (np.ndarray):\nThe first signal.</li>\n<li><strong>p2</strong> (np.ndarray):\nThe second signal.</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>np.ndarray</strong>: The cross spectrum of the two signals.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">p1</span><span class=\"p\">:</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span>, </span><span class=\"param\"><span class=\"n\">p2</span><span class=\"p\">:</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span></span><span class=\"return-annotation\">) -> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span>:</span></span>", "funcdef": "def"}, {"fullname": "imptube.processing.signal_proc.calibration_factor", "modulename": "imptube.processing.signal_proc", "qualname": "calibration_factor", "kind": "function", "doc": "<p>Calculate the calibration factor.</p>\n\n<p>This function calculates the calibration factor based on the given input arrays.\nThe calibration factor is computed as the ratio of the transfer functions\nbetween p11 and p12, and p22 and p21.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>p11</strong> (np.ndarray):\nThe input array representing p11.</li>\n<li><strong>p12</strong> (np.ndarray):\nThe input array representing p12.</li>\n<li><strong>p21</strong> (np.ndarray):\nThe input array representing p21.</li>\n<li><strong>p22</strong> (np.ndarray):\nThe input array representing p22.</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>np.ndarray</strong>: The calibration factor as an array.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">p11</span><span class=\"p\">:</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span>,</span><span class=\"param\">\t<span class=\"n\">p12</span><span class=\"p\">:</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span>,</span><span class=\"param\">\t<span class=\"n\">p21</span><span class=\"p\">:</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span>,</span><span class=\"param\">\t<span class=\"n\">p22</span><span class=\"p\">:</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span></span><span class=\"return-annotation\">) -> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span>:</span></span>", "funcdef": "def"}, {"fullname": "imptube.processing.signal_proc.calc_speed_sound", "modulename": "imptube.processing.signal_proc", "qualname": "calc_speed_sound", "kind": "function", "doc": "<p>Calculate the speed of sound in air at a given temperature.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>tempC</strong> (float):\nThe temperature in degrees Celsius.</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>float</strong>: The speed of sound in meters per second.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">tempC</span><span class=\"p\">:</span> <span class=\"nb\">float</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">float</span>:</span></span>", "funcdef": "def"}, {"fullname": "imptube.processing.signal_proc.calc_char_impedance_air", "modulename": "imptube.processing.signal_proc", "qualname": "calc_char_impedance_air", "kind": "function", "doc": "<p>Calculate the characteristic impedance of air.</p>\n\n<p>This function calculates the characteristic impedance of air based on \nthe given temperature and atmospheric pressure.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>temperature</strong> (float):\nThe temperature of the air in degrees Celsius.</li>\n<li><strong>atm_pressure</strong> (float):\nThe atmospheric pressure in pascals.</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>float</strong>: The characteristic impedance of air in ohms.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">temperature</span><span class=\"p\">:</span> <span class=\"nb\">float</span>, </span><span class=\"param\"><span class=\"n\">atm_pressure</span><span class=\"p\">:</span> <span class=\"nb\">float</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">float</span>:</span></span>", "funcdef": "def"}, {"fullname": "imptube.processing.signal_proc.k_0", "modulename": "imptube.processing.signal_proc", "qualname": "k_0", "kind": "function", "doc": "<p>Calculate the wavenumber for a given speed of sound and frequencies.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>speed_sound</strong> (float):\nThe speed of sound.</li>\n<li><strong>freqs</strong> (np.ndarray):\nAn array of frequencies.</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>np.ndarray</strong>: An array of wavenumbers.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">speed_sound</span><span class=\"p\">:</span> <span class=\"nb\">float</span>, </span><span class=\"param\"><span class=\"n\">freqs</span><span class=\"p\">:</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span></span><span class=\"return-annotation\">) -> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span>:</span></span>", "funcdef": "def"}, {"fullname": "imptube.processing.signal_proc.tf_i_r", "modulename": "imptube.processing.signal_proc", "qualname": "tf_i_r", "kind": "function", "doc": "<p>Calculate the transfer functions for the incident and reflected sound.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>temperature</strong> (float):\nThe temperature in degrees Celsius.</li>\n<li><strong>freqs</strong> (np.ndarray):\nThe array of frequencies.</li>\n<li><strong>s</strong> (float):\nThe distance between the microphones.</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>tuple[np.ndarray, np.ndarray]</strong>: A tuple containing the transfer functions for the incident and reflected sound.</li>\n</ul>\n\n<h6 id=\"notes\">Notes</h6>\n\n<p>The transfer functions are calculated using the speed of sound at the given temperature and the array of frequencies.\nThe transfer function for the incident sound is calculated as exp(-1j * k_0 * s), where k_0 is the wavenumber.\nThe transfer function for the reflected sound is calculated as exp(1j * k_0 * s), where k_0 is the wavenumber.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">temperature</span><span class=\"p\">:</span> <span class=\"nb\">float</span>,</span><span class=\"param\">\t<span class=\"n\">freqs</span><span class=\"p\">:</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span>,</span><span class=\"param\">\t<span class=\"n\">s</span><span class=\"p\">:</span> <span class=\"nb\">float</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">tuple</span><span class=\"p\">[</span><span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span><span class=\"p\">,</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, {"fullname": "imptube.processing.signal_proc.reflection_factor", "modulename": "imptube.processing.signal_proc", "qualname": "reflection_factor", "kind": "function", "doc": "<p>Calculate the reflection factor for a given set of parameters.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>tf_I</strong> (np.ndarray):\nThe transfer function of the incident wave.</li>\n<li><strong>tf_R</strong> (np.ndarray):\nThe transfer function of the reflected wave.</li>\n<li><strong>tf_12</strong> (np.ndarray):\nThe transfer function of the medium between the incident and reflected waves.</li>\n<li><strong>temperature</strong> (float):\nThe temperature of the medium.</li>\n<li><strong>freqs</strong> (np.ndarray):\nThe frequencies at which the reflection factor is calculated.</li>\n<li><strong>x1</strong> (float):\nThe distance between the incident and reflected waves.</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>np.ndarray</strong>: The reflection factor at each frequency.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">tf_I</span><span class=\"p\">:</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span>,</span><span class=\"param\">\t<span class=\"n\">tf_R</span><span class=\"p\">:</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span>,</span><span class=\"param\">\t<span class=\"n\">tf_12</span><span class=\"p\">:</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span>,</span><span class=\"param\">\t<span class=\"n\">temperature</span><span class=\"p\">:</span> <span class=\"nb\">float</span>,</span><span class=\"param\">\t<span class=\"n\">freqs</span><span class=\"p\">:</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span>,</span><span class=\"param\">\t<span class=\"n\">x1</span><span class=\"p\">:</span> <span class=\"nb\">float</span></span><span class=\"return-annotation\">) -> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span>:</span></span>", "funcdef": "def"}, {"fullname": "imptube.processing.signal_proc.absorption_coefficient", "modulename": "imptube.processing.signal_proc", "qualname": "absorption_coefficient", "kind": "function", "doc": "<p>Calculate the absorption coefficient.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>reflection_f</strong> (np.ndarray):\nThe reflection coefficient in the frequency domain.</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>np.ndarray</strong>: The absorption coefficient in the frequency domain.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">reflection_f</span><span class=\"p\">:</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span></span><span class=\"return-annotation\">) -> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span>:</span></span>", "funcdef": "def"}, {"fullname": "imptube.processing.signal_proc.surface_impedance", "modulename": "imptube.processing.signal_proc", "qualname": "surface_impedance", "kind": "function", "doc": "<p>Calculate the surface impedance.</p>\n\n<p>This function calculates the surface impedance based on the reflection factor, temperature, and atmospheric pressure.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>reflection_f</strong> (np.ndarray):\nThe reflection factor.</li>\n<li><strong>temperature</strong> (float):\nThe temperature in degrees Celsius.</li>\n<li><strong>atm_pressure</strong> (float):\nThe atmospheric pressure in Pascal.</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>float</strong>: The surface impedance.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">reflection_f</span><span class=\"p\">:</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span>,</span><span class=\"param\">\t<span class=\"n\">temperature</span><span class=\"p\">:</span> <span class=\"nb\">float</span>,</span><span class=\"param\">\t<span class=\"n\">atm_pressure</span><span class=\"p\">:</span> <span class=\"nb\">float</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">float</span>:</span></span>", "funcdef": "def"}, {"fullname": "imptube.tube", "modulename": "imptube.tube", "kind": "module", "doc": "<p>In this module, three main classes are defined - Measurement, Tube and Sample.</p>\n"}, {"fullname": "imptube.tube.Measurement", "modulename": "imptube.tube", "qualname": "Measurement", "kind": "class", "doc": "<p>Contains information about measurement from the perspective of\nsignal and boundary conditions.</p>\n\n<h6 id=\"attributes\">Attributes</h6>\n\n<ul>\n<li><strong>fs</strong> (int):\nmeasurement sampling frequency</li>\n<li><strong>channels_in</strong> (list[int]):\nlist of input channel numbers</li>\n<li><strong>channels_out</strong> (list[int]):\nlist of output channel numbers (usually one member list)</li>\n<li><strong>device</strong> (str):\nstring specifying part of sound card name\nList of available devices can be obtained with\n<code>python3 -m sounddevice</code> command.</li>\n<li><strong>samples</strong> (int):\nnumber of samples in the generated log sweep\ntypically 2**n</li>\n<li><strong>window_len</strong> (int):\nlength of the Hann half-window applied to the ends of the sweep</li>\n<li><strong>sub_measurements</strong> (int):\nnumber of measurements taken for each specimen\nNormally, no differences between sweep measurements should occur,\nthis attribute mainly compensates for potential playback artifacts.</li>\n<li><strong>f_low</strong> (int):\nlower frequency limit for the generated sweep</li>\n<li><strong>f_high</strong> (int):\nhigher frequency limit for the generated sweep</li>\n</ul>\n"}, {"fullname": "imptube.tube.Measurement.make_sweep", "modulename": "imptube.tube", "qualname": "Measurement.make_sweep", "kind": "function", "doc": "<p>Generates numpy array with log sweep.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>fs</strong> (int):\nmeasurement sampling frequency</li>\n<li><strong>samples</strong> (int):\nnumber of samples in the generated log sweep\ntypically 2**n</li>\n<li><strong>window_len</strong> (int):\nlength of the Hann half-window applied to the ends\nof the sweep</li>\n<li><strong>f_low</strong> (int):\nlower frequency limit for the generated sweep</li>\n<li><strong>f_high</strong> (int):\nhigher frequency limit for the generated sweep</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>log_sweep</strong> (np.ndarray):\nnumpy array containing mono log sweep</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">fs</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">=</span> <span class=\"mi\">48000</span>,</span><span class=\"param\">\t<span class=\"n\">samples</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">=</span> <span class=\"mi\">65536</span>,</span><span class=\"param\">\t<span class=\"n\">window_len</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">=</span> <span class=\"mi\">8192</span>,</span><span class=\"param\">\t<span class=\"n\">f_low</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">=</span> <span class=\"mi\">10</span>,</span><span class=\"param\">\t<span class=\"n\">f_high</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">=</span> <span class=\"mi\">1000</span></span><span class=\"return-annotation\">) -> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span>:</span></span>", "funcdef": "def"}, {"fullname": "imptube.tube.Measurement.measure", "modulename": "imptube.tube", "qualname": "Measurement.measure", "kind": "function", "doc": "<p>Performs measurement and saves the recording. </p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>out_path</strong> (str):\npath where the recording should be saved, including filename</li>\n<li><strong>thd_filter</strong> (bool):\nenables harmonic distortion filtering\nThis affects the files saved.</li>\n<li><strong>export</strong> (bool):\nenables export to specified path</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>data</strong> (np.ndarray):\nmeasured audio data</li>\n<li><strong>fs</strong> (int):\nsampling rate</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">out_path</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">thd_filter</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">True</span>,</span><span class=\"param\">\t<span class=\"n\">export</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">True</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">tuple</span><span class=\"p\">[</span><span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span><span class=\"p\">,</span> <span class=\"nb\">int</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, {"fullname": "imptube.tube.Tube", "modulename": "imptube.tube", "qualname": "Tube", "kind": "class", "doc": "<p>Class representing tube geometry.</p>\n\n<h6 id=\"attributes\">Attributes</h6>\n\n<ul>\n<li><strong>further_mic_dist</strong> (float):\nfurther microphone distance from sample</li>\n<li><strong>closer_mic_dist</strong> (float):\ncloser mic distance from sample</li>\n<li><strong>freq_limit</strong> (int):\nhigher frequency limit for exports</li>\n</ul>\n"}, {"fullname": "imptube.tube.Sample", "modulename": "imptube.tube", "qualname": "Sample", "kind": "class", "doc": "<p>A class representing sample and its boundary conditions.</p>\n\n<h6 id=\"attributes\">Attributes</h6>\n\n<ul>\n<li><strong>name</strong> (str):\nname of the sample</li>\n<li><strong>temperature</strong> (float):\nambient temperature in degC</li>\n<li><strong>rel_humidity</strong> (float):\nambient relative humidity in %</li>\n<li><strong>tube</strong> (Tube):\nimpedance tube definition object</li>\n<li><strong>timestamp</strong> (str):\nstrftime timestamp in a format '%y-%m-%d_%H-%M'</li>\n<li><strong>folder</strong> (str):\npath to project data folder, defaults to \"data\"</li>\n</ul>\n"}, {"fullname": "imptube.tube.Sample.migrate_cal", "modulename": "imptube.tube", "qualname": "Sample.migrate_cal", "kind": "function", "doc": "<p>Migrates calibration files from different measurement.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>cal_name</strong> (str):\ncalibration sample name</li>\n<li><strong>cal_stamp</strong> (str):\ncalibration sample timestamp i a '%y-%m-%d_%H-%M' format</li>\n<li><strong>cal_parent</strong> (str):\nparent data folder, defaults to 'data'</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">cal_name</span>, </span><span class=\"param\"><span class=\"n\">cal_stamp</span>, </span><span class=\"param\"><span class=\"n\">cal_parent</span><span class=\"o\">=</span><span class=\"s1\">&#39;data&#39;</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "imptube.tube.calibration", "modulename": "imptube.tube", "qualname": "calibration", "kind": "function", "doc": "<p>Performs CLI calibration measurement.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><p><strong>sample</strong> (imptube.tube.Sample):</p></li>\n<li><p><strong>measurement</strong> (Measurement):</p></li>\n<li><p><strong>thd_filter</strong> (bool):\nEnables harmonic distortion filtering</p></li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">sample</span><span class=\"p\">:</span> <span class=\"n\">imptube</span><span class=\"o\">.</span><span class=\"n\">tube</span><span class=\"o\">.</span><span class=\"n\">Sample</span>,</span><span class=\"param\">\t<span class=\"n\">measurement</span><span class=\"p\">:</span> <span class=\"n\">imptube</span><span class=\"o\">.</span><span class=\"n\">tube</span><span class=\"o\">.</span><span class=\"n\">Measurement</span>,</span><span class=\"param\">\t<span class=\"n\">thd_filter</span><span class=\"o\">=</span><span class=\"kc\">True</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "imptube.tube.single_measurement", "modulename": "imptube.tube", "qualname": "single_measurement", "kind": "function", "doc": "<p>Performs measurement.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><p><strong>sample</strong> (imptube.tube.Sample):</p></li>\n<li><p><strong>measurement</strong> (Measurement):</p></li>\n<li><p><strong>depth</strong> (float):\ncurrent depth of the sample</p></li>\n<li><strong>thd_filter</strong> (bool):\nEnables harmonic distortion filtering</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>sub_measurement_data</strong> (list[np.ndarray]):\nlist of audio recordings taken</li>\n<li><strong>fs</strong> (float):\nsampling rate of the recording</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">sample</span><span class=\"p\">:</span> <span class=\"n\">imptube</span><span class=\"o\">.</span><span class=\"n\">tube</span><span class=\"o\">.</span><span class=\"n\">Sample</span>,</span><span class=\"param\">\t<span class=\"n\">measurement</span><span class=\"p\">:</span> <span class=\"n\">imptube</span><span class=\"o\">.</span><span class=\"n\">tube</span><span class=\"o\">.</span><span class=\"n\">Measurement</span>,</span><span class=\"param\">\t<span class=\"n\">depth</span><span class=\"p\">:</span> <span class=\"nb\">float</span>,</span><span class=\"param\">\t<span class=\"n\">thd_filter</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">True</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">tuple</span><span class=\"p\">[</span><span class=\"nb\">list</span><span class=\"p\">[</span><span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span><span class=\"p\">],</span> <span class=\"nb\">int</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, {"fullname": "imptube.tube.calculate_alpha", "modulename": "imptube.tube", "qualname": "calculate_alpha", "kind": "function", "doc": "<p>Performs transfer function and alpha calculations from audio data\nfound in a valid folder structure.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>sample</strong> (Sample):</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>alpha</strong> (np.ndarray):\nsound absorption coefficient for frequencies lower than \nlimit specified in sample.tube.freq_limit</li>\n<li><strong>freqs</strong> (np.ndarray):\nfrequency values for the alpha array</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">sample</span><span class=\"p\">:</span> <span class=\"n\">imptube</span><span class=\"o\">.</span><span class=\"n\">tube</span><span class=\"o\">.</span><span class=\"n\">Sample</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">tuple</span><span class=\"p\">[</span><span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span><span class=\"p\">,</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, {"fullname": "imptube.tube.Sensor", "modulename": "imptube.tube", "qualname": "Sensor", "kind": "class", "doc": "<p>A protocol for Sensor class implementation.</p>\n", "bases": "typing.Protocol"}];

    // mirrored in build-search-index.js (part 1)
    // Also split on html tags. this is a cheap heuristic, but good enough.
    elasticlunr.tokenizer.setSeperator(/[\s\-.;&_'"=,()]+|<[^>]*>/);

    let searchIndex;
    if (docs._isPrebuiltIndex) {
        console.info("using precompiled search index");
        searchIndex = elasticlunr.Index.load(docs);
    } else {
        console.time("building search index");
        // mirrored in build-search-index.js (part 2)
        searchIndex = elasticlunr(function () {
            this.pipeline.remove(elasticlunr.stemmer);
            this.pipeline.remove(elasticlunr.stopWordFilter);
            this.addField("qualname");
            this.addField("fullname");
            this.addField("annotation");
            this.addField("default_value");
            this.addField("signature");
            this.addField("bases");
            this.addField("doc");
            this.setRef("fullname");
        });
        for (let doc of docs) {
            searchIndex.addDoc(doc);
        }
        console.timeEnd("building search index");
    }

    return (term) => searchIndex.search(term, {
        fields: {
            qualname: {boost: 4},
            fullname: {boost: 2},
            annotation: {boost: 2},
            default_value: {boost: 2},
            signature: {boost: 2},
            bases: {boost: 2},
            doc: {boost: 1},
        },
        expand: true
    });
})();